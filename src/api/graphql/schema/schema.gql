# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumUserKindFieldUpdateOperationsInput {
  set: UserKind
}

input EnumUserKindFilter {
  equals: UserKind
  in: [UserKind!]
  not: NestedEnumUserKindFilter
  notIn: [UserKind!]
}

type Image {
  _count: ImageCount
  description: String
  id: String!
  thumbnail: String!
  uploadTime: DateTime!
}

type ImageCount {
  post: Int!
}

input ImageCreateInput {
  description: String
  id: String
  post: PostCreateNestedManyWithoutImagesInput
  thumbnail: String!
  uploadTime: DateTime
}

input ImageCreateNestedManyWithoutPostInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutPostInput!]
  create: [ImageCreateWithoutPostInput!]
}

input ImageCreateOrConnectWithoutPostInput {
  create: ImageCreateWithoutPostInput!
  where: ImageWhereUniqueInput!
}

input ImageCreateWithoutPostInput {
  description: String
  id: String
  thumbnail: String!
  uploadTime: DateTime
}

input ImageListRelationFilter {
  every: ImageWhereInput
  none: ImageWhereInput
  some: ImageWhereInput
}

input ImageOrderByRelationAggregateInput {
  _count: SortOrder
}

input ImageOrderByWithRelationInput {
  description: SortOrder
  id: SortOrder
  post: PostOrderByRelationAggregateInput
  thumbnail: SortOrder
  uploadTime: SortOrder
}

enum ImageScalarFieldEnum {
  description
  id
  thumbnail
  uploadTime
}

input ImageScalarWhereInput {
  AND: [ImageScalarWhereInput!]
  NOT: [ImageScalarWhereInput!]
  OR: [ImageScalarWhereInput!]
  description: StringNullableFilter
  id: StringFilter
  thumbnail: StringFilter
  uploadTime: DateTimeFilter
}

input ImageUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  thumbnail: StringFieldUpdateOperationsInput
  uploadTime: DateTimeFieldUpdateOperationsInput
}

input ImageUpdateManyWithWhereWithoutPostInput {
  data: ImageUpdateManyMutationInput!
  where: ImageScalarWhereInput!
}

input ImageUpdateManyWithoutPostNestedInput {
  connect: [ImageWhereUniqueInput!]
  connectOrCreate: [ImageCreateOrConnectWithoutPostInput!]
  create: [ImageCreateWithoutPostInput!]
  delete: [ImageWhereUniqueInput!]
  deleteMany: [ImageScalarWhereInput!]
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  update: [ImageUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [ImageUpdateManyWithWhereWithoutPostInput!]
  upsert: [ImageUpsertWithWhereUniqueWithoutPostInput!]
}

input ImageUpdateWithWhereUniqueWithoutPostInput {
  data: ImageUpdateWithoutPostInput!
  where: ImageWhereUniqueInput!
}

input ImageUpdateWithoutPostInput {
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  thumbnail: StringFieldUpdateOperationsInput
  uploadTime: DateTimeFieldUpdateOperationsInput
}

input ImageUpsertWithWhereUniqueWithoutPostInput {
  create: ImageCreateWithoutPostInput!
  update: ImageUpdateWithoutPostInput!
  where: ImageWhereUniqueInput!
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  description: StringNullableFilter
  id: StringFilter
  post: PostListRelationFilter
  thumbnail: StringFilter
  uploadTime: DateTimeFilter
}

input ImageWhereUniqueInput {
  id: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

type Mutation {
  createImage(data: ImageCreateInput!, image: Upload!): Image!
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserCreateInput!): User!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteUser(where: UserWhereUniqueInput!): User
  logout: Boolean!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumUserKindFilter {
  equals: UserKind
  in: [UserKind!]
  not: NestedEnumUserKindFilter
  notIn: [UserKind!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Post {
  _count: PostCount
  authorId: String
  content: JSON!
  title: String!
}

type PostCount {
  images: Int!
}

input PostCreateInput {
  author: UserCreateNestedOneWithoutPostsInput
  content: JSON!
  images: ImageCreateNestedManyWithoutPostInput
  title: String!
}

input PostCreateManyAuthorInput {
  content: JSON!
  title: String!
}

input PostCreateManyAuthorInputEnvelope {
  data: [PostCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input PostCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostCreateNestedManyWithoutImagesInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutImagesInput!]
  create: [PostCreateWithoutImagesInput!]
}

input PostCreateOrConnectWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateOrConnectWithoutImagesInput {
  create: PostCreateWithoutImagesInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  content: JSON!
  images: ImageCreateNestedManyWithoutPostInput
  title: String!
}

input PostCreateWithoutImagesInput {
  author: UserCreateNestedOneWithoutPostsInput
  content: JSON!
  title: String!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  content: SortOrder
  images: ImageOrderByRelationAggregateInput
  title: SortOrder
}

enum PostScalarFieldEnum {
  authorId
  content
  title
}

input PostUpdateInput {
  author: UserUpdateOneWithoutPostsNestedInput
  content: JSON
  images: ImageUpdateManyWithoutPostNestedInput
  title: StringFieldUpdateOperationsInput
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  author: UserRelationFilter
  authorId: StringNullableFilter
  content: JsonFilter
  images: ImageListRelationFilter
  title: StringFilter
}

input PostWhereUniqueInput {
  title: String
}

type Query {
  currentUser: User
  images(cursor: ImageWhereUniqueInput, distinct: [ImageScalarFieldEnum!], orderBy: [ImageOrderByWithRelationInput!], skip: Int, take: Int, where: ImageWhereInput): [Image!]!
  post(where: PostWhereUniqueInput!): Post
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  _count: UserCount
  email: String!
  firstName: String!
  id: String!
  kind: UserKind!
  lastName: String!
  password: String!
}

type UserCount {
  posts: Int!
}

input UserCreateInput {
  email: String!
  firstName: String!
  id: String
  kind: UserKind
  lastName: String!
  password: String!
  posts: PostCreateNestedManyWithoutAuthorInput
}

input UserCreateNestedOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOrConnectWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutPostsInput {
  email: String!
  firstName: String!
  id: String
  kind: UserKind
  lastName: String!
  password: String!
}

enum UserKind {
  ADMIN
  NORMAL
}

input UserOrderByWithRelationInput {
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  kind: SortOrder
  lastName: SortOrder
  password: SortOrder
  posts: PostOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  email
  firstName
  id
  kind
  lastName
  password
}

input UserUpdateOneWithoutPostsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  create: UserCreateWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutPostsInput {
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  kind: EnumUserKindFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  email: StringFilter
  firstName: StringFilter
  id: StringFilter
  kind: EnumUserKindFilter
  lastName: StringFilter
  password: StringFilter
  posts: PostListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}