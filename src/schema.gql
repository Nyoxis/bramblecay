# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateUser {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
}

input EnumUserKindFieldUpdateOperationsInput {
  set: UserKind
}

input EnumUserKindFilter {
  equals: UserKind
  in: [UserKind!]
  not: NestedEnumUserKindFilter
  notIn: [UserKind!]
}

input EnumUserKindWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumUserKindFilter
  _min: NestedEnumUserKindFilter
  equals: UserKind
  in: [UserKind!]
  not: NestedEnumUserKindWithAggregatesFilter
  notIn: [UserKind!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createUser(data: UserCreateInput!): User!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteUser(where: UserWhereUniqueInput!): User
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedEnumUserKindFilter {
  equals: UserKind
  in: [UserKind!]
  not: NestedEnumUserKindFilter
  notIn: [UserKind!]
}

input NestedEnumUserKindWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumUserKindFilter
  _min: NestedEnumUserKindFilter
  equals: UserKind
  in: [UserKind!]
  not: NestedEnumUserKindWithAggregatesFilter
  notIn: [UserKind!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

type Query {
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  age: Int
  email: String!
  id: String!
  kind: UserKind!
}

type UserAvgAggregate {
  age: Float
}

input UserAvgOrderByAggregateInput {
  age: SortOrder
}

type UserCountAggregate {
  _all: Int!
  age: Int!
  email: Int!
  id: Int!
  kind: Int!
}

input UserCountOrderByAggregateInput {
  age: SortOrder
  email: SortOrder
  id: SortOrder
  kind: SortOrder
}

input UserCreateInput {
  age: Int
  email: String!
  id: String
  kind: UserKind!
}

input UserCreateManyInput {
  age: Int
  email: String!
  id: String
  kind: UserKind!
}

type UserGroupBy {
  _avg: UserAvgAggregate
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  _sum: UserSumAggregate
  age: Int
  email: String!
  id: String!
  kind: UserKind!
}

enum UserKind {
  ADMIN
  NORMAL
}

type UserMaxAggregate {
  age: Int
  email: String
  id: String
  kind: UserKind
}

input UserMaxOrderByAggregateInput {
  age: SortOrder
  email: SortOrder
  id: SortOrder
  kind: SortOrder
}

type UserMinAggregate {
  age: Int
  email: String
  id: String
  kind: UserKind
}

input UserMinOrderByAggregateInput {
  age: SortOrder
  email: SortOrder
  id: SortOrder
  kind: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  age: SortOrder
  email: SortOrder
  id: SortOrder
  kind: SortOrder
}

input UserOrderByWithRelationInput {
  age: SortOrder
  email: SortOrder
  id: SortOrder
  kind: SortOrder
}

enum UserScalarFieldEnum {
  age
  email
  id
  kind
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  age: IntNullableWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  kind: EnumUserKindWithAggregatesFilter
}

type UserSumAggregate {
  age: Int
}

input UserSumOrderByAggregateInput {
  age: SortOrder
}

input UserUpdateInput {
  age: NullableIntFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  kind: EnumUserKindFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  age: NullableIntFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  kind: EnumUserKindFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  age: IntNullableFilter
  email: StringFilter
  id: StringFilter
  kind: EnumUserKindFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
